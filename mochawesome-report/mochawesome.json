{
  "stats": {
    "suites": 6,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-15T09:44:42.426Z",
    "end": "2024-01-15T09:45:16.897Z",
    "duration": 34471,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ca027386-b3eb-4989-9779-25c8fdec9c95",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b4515632-641e-46fe-bc2d-2978a796af73",
          "title": "Conciliator test",
          "fullFile": "D:\\EJALAS_TESTING\\tests\\conciliatorRegister.test.js",
          "file": "\\tests\\conciliatorRegister.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Conciliator test\"",
              "fullTitle": "Conciliator test \"after all\" hook in \"Conciliator test\"",
              "timedOut": null,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "fa08262b-e13d-4b38-a325-80773d280ca7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "conciliator-inspection-verify test",
              "fullTitle": "Conciliator test conciliator-inspection-verify test",
              "timedOut": null,
              "duration": 18147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  driver.get(\"https://demo.ejalas.com/login\");\n  // login\n  await login(driver);\n  // navigate to the url\n  await driver.get(\"https://demo.ejalas.com/admin/melmilapkarta-darta\");\n  // target the table data\n  const targetElement = await driver.findElement(\n    By.css(`tbody tr:first-child`)\n  );\n  // first get the data of the darta that you are going to vew\n  // this is the username that we want to vew the content of\n  const name = await targetElement.findElement(By.css(\"td\")).getText();\n  // now see the darta info by clicking on view/eye icon\n  const viewButton = await targetElement.findElement(\n    By.css(`:last-child a`)\n  );\n  await driver.executeScript(\"arguments[0].click();\", viewButton);\n  //now target the table and get the text and note the text should not be empty\n  // in most case, we consider the test that does contains the info in the table\n  const tableElement = await driver.wait(\n    until.elementLocated(By.css(\"tbody tr:first-child\"))\n  );\n  const tableName = await tableElement.findElement(By.css(\"td\")).getText();\n  if (name != tableName)\n    throw new Error(\n      \"The user name that we viewed the content of didn't match\"\n    );\n  if (name == tableName) {\n    // click reject or approved we check for the reject\n    const btn = await driver.findElement(\n      By.css(\".buttons-container a:last-child\")\n    );\n    driver.executeScript(\"arguments[0].click();\", btn);\n    // now check for the modification if the approval section is rejected\n    // target the element that we clicked previously\n    await driver.sleep(2000);\n    const targetElement = await driver.wait(\n      until.elementLocated(By.css(`tbody tr:first-child`))\n    );\n    const isChanged = await targetElement\n      .findElement(By.css(`td:nth-child(7)`))\n      .getText();\n    if (isChanged != \"अस्वीकार गरियो\")\n      throw new Error(\"conciliator registered was not rejected\");\n  }\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "ef6e1670-f4df-47fd-920b-f2efd8774080",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef6e1670-f4df-47fd-920b-f2efd8774080"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18147,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "3d7347e1-f36c-45cd-96b5-a468298aeb92",
          "title": "DashBoard-Test",
          "fullFile": "D:\\EJALAS_TESTING\\tests\\dashboard.test.js",
          "file": "\\tests\\dashboard.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DashBoard-Test\"",
              "fullTitle": "DashBoard-Test \"before all\" hook in \"DashBoard-Test\"",
              "timedOut": null,
              "duration": 2076,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = new Builder()\n  .forBrowser(\"chrome\")\n  .setChromeOptions(new chrome.Options().headless())\n  .build();\nawait driver.manage().window().setRect({ width: 1920, height: 1080 });",
              "err": {},
              "uuid": "f7676c71-d8e1-4d4b-a65c-ed525375ec11",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DashBoard-Test\"",
              "fullTitle": "DashBoard-Test \"after all\" hook in \"DashBoard-Test\"",
              "timedOut": null,
              "duration": 71,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "cfc4df17-ae11-4e7b-8fae-c8799fb3fc2d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "dashboard-component test",
              "fullTitle": "DashBoard-Test dashboard-component test",
              "timedOut": null,
              "duration": 10233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/login\");\n  await login(driver);\n  // checking the dashboard content\n  const contentElement = await driver.findElements(\n    By.className(\"number-of-cases-item\")\n  );\n  for (content of contentElement) {\n    const icon = await content.findElement(By.xpath(\".//i\")).isDisplayed();\n    const categoryText = await content.findElement(By.xpath(\".//h3\"));\n    const caseQuantity = await content.findElement(By.xpath(\".//span\"));\n    // test for the icon render in the component dashboard.\n    if (!icon)\n      throw new Error(\"Error: component icon not rendered in dashboard\");\n    // number of cases cannot be negative.\n    if ((await Number(caseQuantity)) <= 0 || caseQuantity == \"\")\n      throw new Error(\n        \"The number defined in the dashboard component is not displayed or inappropriate format\"\n      );\n    // text cannot be empty inside the component.\n    if (categoryText == \"\")\n      throw new Error(\n        \"The category text is not defined in the dashboard component\"\n      );\n  }\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "1283852a-b47b-4f85-8d70-be59c37363a9",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dashboard-graph test",
              "fullTitle": "DashBoard-Test dashboard-graph test",
              "timedOut": null,
              "duration": 7309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/login\");\n  await login(driver);\n  const chart = await driver.findElement(By.id(\"myChart\"));\n  // check if the canvas is displayed or not\n  if (!(await chart.isDisplayed())) {\n    throw new Error(\"Chart in dashboard not displayed\");\n  }\n  // check for the width and height of the canvas\n  const width = await chart.getAttribute(\"width\");\n  const height = await chart.getAttribute(\"height\");\n  console.log(width, height);\n  if (width <= 0 || height <= 0) {\n    throw new Error(\"Canvas width and height is improper\");\n  }\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "7fa9fac5-42a8-43b5-8c70-c23d182a30a0",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1283852a-b47b-4f85-8d70-be59c37363a9",
            "7fa9fac5-42a8-43b5-8c70-c23d182a30a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17542,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "a541ca1a-3b28-482c-9222-ea10599306c1",
          "title": "Login Test",
          "fullFile": "D:\\EJALAS_TESTING\\tests\\login.test.js",
          "file": "\\tests\\login.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login Test\"",
              "fullTitle": "Login Test \"before all\" hook in \"Login Test\"",
              "timedOut": null,
              "duration": 2070,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "// headless options\ndriver = new Builder()\n  .forBrowser(\"chrome\")\n  .setChromeOptions(new chrome.Options().headless())\n  .build();\nawait driver.manage().window().setRect({ width: 1920, height: 1080 });",
              "err": {},
              "uuid": "a18770f0-7282-497d-bf6d-d1589156fd6c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login Test\"",
              "fullTitle": "Login Test \"after all\" hook in \"Login Test\"",
              "timedOut": null,
              "duration": 516,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "df719e0c-8c7d-478f-b26d-3a9af95668ea",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login Test\"",
              "fullTitle": "Login Test \"after each\" hook in \"Login Test\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "const specificTestCases = [\"unsuccessful-login\"];\nif (\n  this.currentTest.state == \"passed\" &&\n  specificTestCases.includes(this.currentTest.title)\n) {\n  let imageFileName = this.currentTest.title + \".jpeg\";\n  driver.takeScreenshot().then(function (image) {\n    fs.writeFileSync(`./screenshots/${imageFileName}`, image, \"base64\");\n  });\n  // addContext is the method that is defined in the mocha awesome library\n  addContext(this, \"Following comes the test case screen shot.\");\n  addContext(this, `../screenshots/${imageFileName}`);\n}",
              "err": {},
              "uuid": "40686405-07eb-4ed7-9bef-2564ae78a696",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "successful-login",
              "fullTitle": "Login Test successful-login",
              "timedOut": null,
              "duration": 9943,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/login\");\n  // handles login operation\n  await login(driver);\n  try {\n    // to be more specific the url will be redirect to the admin/dashboard\n    // check for the url if it has been navigated or not.\n    await driver.wait(until.urlContains(data.navUrl));\n  } catch (err) {\n    console.log(err.message);\n  }\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "7a4056a6-3ed2-4cb7-b8f8-5d68ee3518c3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessful-login",
              "fullTitle": "Login Test unsuccessful-login",
              "timedOut": null,
              "duration": 9171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"Following comes the test case screen shot.\",\n  \"../screenshots/unsuccessful-login.jpeg\"\n]",
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/login\");\n  // method handles the  login operation\n  await login(driver, data.user, `${data.password}sdf`);\n  // search for the error element if exists\n  const errorElement = await driver.wait(\n    until.elementLocated(By.className(\"alert alert-danger\")),\n    3000\n  );\n  // if the user and password are incorrect.\n  // error message element pops up\n  if (errorElement) {\n    const errorText = await errorElement.getText();\n    console.log(errorText);\n  }\n  // here the url will also not be redirected to the dashboard\n  // this is optional because the url is different for the different user based on the name/dashboard\n  await driver.wait(until.urlContains(data.navUrl), 3000);\n} catch (err) {\n  // here the occurrence error is for sure so check so we log the error message only,\n  console.log(`Error: ${err.message}`);\n}",
              "err": {},
              "uuid": "b2c33d12-8988-4a53-8557-547696e6e70d",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a4056a6-3ed2-4cb7-b8f8-5d68ee3518c3",
            "b2c33d12-8988-4a53-8557-547696e6e70d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19114,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "b7fe550e-ed84-4e19-b0c0-6e5bf7787959",
          "title": "Complain-Type Test",
          "fullFile": "D:\\EJALAS_TESTING\\tests\\complaintType.test.js",
          "file": "\\tests\\complaintType.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Complain-Type Test\"",
              "fullTitle": "Complain-Type Test \"before all\" hook in \"Complain-Type Test\"",
              "timedOut": null,
              "duration": 2121,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = new Builder()\n  .forBrowser(\"chrome\")\n  .setChromeOptions(new chrome.Options().headless())\n  .build();\nawait driver.manage().window().setRect({ width: 1920, height: 1080 });",
              "err": {},
              "uuid": "5c1ef192-acfc-4d04-84cc-7ca776a7e84e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Complain-Type Test\"",
              "fullTitle": "Complain-Type Test \"after all\" hook in \"Complain-Type Test\"",
              "timedOut": null,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "71fdf3c2-f995-4199-a7a5-6f5537b44215",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Add Complaint-Test",
              "fullTitle": "Complain-Type Test Add Complaint-Test",
              "timedOut": null,
              "duration": 15021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/login\");\n  await login(driver);\n  await driver.get(\"https://demo.ejalas.com/admin/complaint-type\");\n  // get the length of the table\n  const tableDataLength = (await driver.findElements(By.css(\"tbody tr\")))\n    .length;\n  // select the input element\n  // issue type element.\n  await driver\n    .findElement(By.id(\"courtName\"))\n    .sendKeys(\"This is a demo test issue\");\n  await driver\n    .findElement(By.className(\"common-court-btn btn btn-success\"))\n    .click();\n  // check the issue if added to the list or not.\n  // it will be contained at the last of the table.\n  const lastElement = await driver.wait(\n    until.elementLocated(By.css(\"tbody tr:last-child\")),\n    3000\n  );\n  console.log(await lastElement.getText());\n  // check if the length has been increase in the table if yes then the\n  // data has been added\n  const newTableDataLength = await driver.findElements(By.css(\"tbody tr\"));\n  if (newTableDataLength == tableDataLength)\n    throw new Error(\"The Data was not added\");\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "41fbb8ac-70e4-4711-8cd1-a92258b70d2b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Edit Complain-Test",
              "fullTitle": "Complain-Type Test Edit Complain-Test",
              "timedOut": null,
              "duration": 7350,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/admin/complaint-type\");\n  // target the element that we want to modify\n  // target the last table data because it contains the latest data\n  const lastElement = await driver.wait(\n    until.elementLocated(By.css(\"tbody tr:last-child\"))\n  );\n  const text = await lastElement.findElement(By.css(\"td\")).getText();\n  // click edit btn\n  const editBtn = await lastElement.findElement(\n    By.css(\"td:nth-child(3) a\")\n  );\n  await driver.executeScript(\"arguments[0].click()\", editBtn);\n  // now do the modification that you want and submit.\n  await driver.findElement(By.id(\"courtName\")).sendKeys(\" modification\");\n  // submit\n  await driver\n    .findElement(By.className(\"common-court-btn btn btn-success\"))\n    .click();\n  // check if the data has been modified or not\n  const modifiedLastElement = await driver.wait(\n    until.elementLocated(By.css(\"tbody tr:last-child\"))\n  );\n  const modifiedText = await modifiedLastElement\n    .findElement(By.css(\"td\"))\n    .getText();\n  console.log(text);\n  console.log(modifiedText);\n  // if modified text and the previous text is same then the data was not updated\n  if (modifiedText == text) throw new Error(\"Data was not modified\");\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "4f369528-9b85-40af-854a-ec3f8a7cb799",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41fbb8ac-70e4-4711-8cd1-a92258b70d2b",
            "4f369528-9b85-40af-854a-ec3f8a7cb799"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22371,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "cc8ff225-4581-49e1-a454-0df92cb95e31",
          "title": "Judiciary Committee Test",
          "fullFile": "D:\\EJALAS_TESTING\\tests\\judiciaryCommittee.test.js",
          "file": "\\tests\\judiciaryCommittee.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Judiciary Committee Test\"",
              "fullTitle": "Judiciary Committee Test \"before all\" hook in \"Judiciary Committee Test\"",
              "timedOut": null,
              "duration": 2166,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = new Builder()\n  .forBrowser(\"chrome\")\n  .setChromeOptions(new chrome.Options().headless())\n  .build();\nawait driver.manage().window().setRect({ width: 1920, height: 1080 });",
              "err": {},
              "uuid": "1b3f80d0-3f83-4eb3-8404-ec78902d675c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Judiciary Committee Test\"",
              "fullTitle": "Judiciary Committee Test \"after all\" hook in \"Judiciary Committee Test\"",
              "timedOut": null,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "1828afb0-24dc-440f-901b-661b63f29536",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Addition of judiciary Committee Test",
              "fullTitle": "Judiciary Committee Test Addition of judiciary Committee Test",
              "timedOut": null,
              "duration": 15529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/login\");\n  // login.\n  await login(driver);\n  await driver.get(\"https://demo.ejalas.com/admin/court\");\n  // here the input element is a div tag\n  const inputELements = await driver.findElements(By.className(\"col-md-3\"));\n  for (let i = 0; i < inputELements.length; i++) {\n    // the first one is the input field and other is to be selected from the option element\n    if (i == 0) {\n      const input = await inputELements[0].findElement(By.css(\"input\"));\n      await input.sendKeys(obj[0]);\n    } else {\n      // remaining 3 of them are a select option so selecting one of them\n      // first target the select element\n      const selectElement = await inputELements[i].findElement(\n        By.css(\"select\")\n      );\n      const select = new Select(selectElement);\n      select.selectByIndex(0);\n    }\n  }\n  // submit the data that we added.\n  await driver\n    .findElement(By.className(\"common-court-btn btn btn-success\"))\n    .click();\n  // get the last element of the table body\n  // to check if the element is added or not\n  const lastElement = await driver.wait(\n    until.elementLocated(By.css(\"tbody tr:last-child\")),\n    3000\n  );\n  // target the tbody to check the length of tr\n  const tbody = await driver.findElements(By.css(\"tbody tr\"));\n  const thText = await lastElement.findElement(By.css(\"th\")).getText();\n  // gets the data in array format\n  const tdText = (\n    await lastElement.findElement(By.css(\"td\")).getText()\n  ).split();\n  console.log(tdText, thText);\n  if (tdText[0] != obj[0] && tbody.length != thText) {\n    throw new Error(\n      \"The content didn't match with the input or the index was not matched with the table index\"\n    );\n  }\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "0a3fc91a-0235-4d19-82e9-5c285453abdd",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Edit Judicial Committee Test",
              "fullTitle": "Judiciary Committee Test Edit Judicial Committee Test",
              "timedOut": null,
              "duration": 12890,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get(\"https://demo.ejalas.com/admin/court\");\n//click the edit button\nawait driver\n  .findElement(\n    By.xpath(\n      `//*[@id=\"content-wrapper\"]/section[2]/div[2]/section/div[3]/div/table/tbody/tr[1]/td[5]/a`\n    )\n  )\n  .click();\n// now modify the data\n// target the input and change the data.\nconst inputELements = await driver.findElements(By.className(\"col-md-3\"));\n//input text.\nconst inputText = `test modified ${Math.floor(Math.random() * 10)}`;\nfor (let i = 0; i < inputELements.length; i++) {\n  // the first one is the input field and other is to be selected from the option element\n  if (i == 0) {\n    const input = await inputELements[0].findElement(By.css(\"input\"));\n    await input.clear();\n    await input.sendKeys(inputText);\n  } else {\n    // remaining 3 of them are a select option so selecting one of them\n    // first target the select element\n    const selectElement = await inputELements[i].findElement(\n      By.css(\"select\")\n    );\n    const select = new Select(selectElement);\n    select.selectByIndex(0);\n  }\n}\n// submit the edited data.\nawait driver\n  .findElement(By.className(\"common-court-btn btn btn-success\"))\n  .click();\n// check if the data has been chanced or not.\nconst modifiedDataElement = await driver.findElement(\n  By.xpath(\n    `//*[@id=\"content-wrapper\"]/section[2]/div[2]/section/div[3]/div/table/tbody/tr[1]`\n  )\n);\nconst inputDataElement = await modifiedDataElement.findElement(\n  By.xpath(`//tr/td[1]`)\n);\nconst latestModifiedText = await inputDataElement.getText();\nif (latestModifiedText != inputText)\n  throw new Error(\"Modification un-successful\");\nconsole.log(\"Ok\");\nawait driver.sleep(5000);",
              "err": {},
              "uuid": "f8fa2785-4929-4ca6-b89b-0c55a979549a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a3fc91a-0235-4d19-82e9-5c285453abdd",
            "f8fa2785-4929-4ca6-b89b-0c55a979549a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28419,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "1a1b7d9b-714c-4525-9ebe-98b95a7254c8",
          "title": "Home Page component Test",
          "fullFile": "D:\\EJALAS_TESTING\\tests\\homePage.test.js",
          "file": "\\tests\\homePage.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Home Page component Test\"",
              "fullTitle": "Home Page component Test \"before all\" hook in \"Home Page component Test\"",
              "timedOut": null,
              "duration": 2435,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = new Builder()\n  .forBrowser(\"chrome\")\n  .setChromeOptions(new chrome.Options().headless())\n  .build();\nawait driver.manage().window().setRect({ width: 1920, height: 1080 });",
              "err": {},
              "uuid": "8cd3f43d-bff6-47c5-b25a-871fbf5b0e54",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Home Page component Test\"",
              "fullTitle": "Home Page component Test \"after all\" hook in \"Home Page component Test\"",
              "timedOut": null,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "5495b9cc-bab9-4351-86d8-fa900dc5320e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "home-page-test",
              "fullTitle": "Home Page component Test home-page-test",
              "timedOut": null,
              "duration": 7728,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/\");\n  // check if the date is displayed or not\n  const date = await driver.findElement(By.css(`.date span iframe`));\n  if (!date.isDisplayed())\n    throw new Error(\"The date is not displayed in home page\");\n  // home page broken image test.\n  await brokenImageTest(driver, \"https://demo.ejalas.com\");\n  const marquee = await driver.findElement(\n    By.xpath(`//*[@id=\"header-wrapper\"]/div/div[2]/div/marquee`)\n  );\n  // first check if the marquee if displayed or not\n  if (!(await marquee.isDisplayed()))\n    throw new Error(\"The marquee element/news slide is not displayed\");\n  // now check if the text message inside is present or not?\n  const marqueeText = await marquee.findElement(By.css(\"ul\")).getText();\n  if (marqueeText == 0)\n    throw new Error(\"The news-slide content is not displayed\");\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "ee27ddb7-1c95-479a-add5-328e1641c01b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ujuri-case-search-result-fail-test",
              "fullTitle": "Home Page component Test ujuri-case-search-result-fail-test",
              "timedOut": null,
              "duration": 6378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/tarikh\");\n  // target the input to search for the case number\n  // assume the case number is 123 which does not exists should give us error message\n  await driver.findElement(By.css(`form input`)).sendKeys(\"123\");\n  //target the button and search for it.\n  // here we should get the error message because we have an unregister case number\n  await driver.findElement(By.css(\"button\")).click();\n  // check if the error message pop up or not.\n  const errorElement = await driver.wait(\n    until.elementLocated(By.className(\"text-center alert alert-danger\"))\n  );\n  const errorText = await errorElement.getText();\n  if (errorText != \"मुद्दा नं को तारिख उपलब्ध छैन\")\n    throw new Error(\"Error in getting the error element\");\n  console.log(errorText);\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "77621d87-005c-4650-b8bf-951e28e3a569",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ujuri-case-search-result-success-test",
              "fullTitle": "Home Page component Test ujuri-case-search-result-success-test",
              "timedOut": null,
              "duration": 5389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const code = \"sfj\";\n  await driver.get(\"https://demo.ejalas.com/tarikh\");\n  // target the input to search for the case number\n  // assume the case number is 123 which does not exists should give us error message\n  await driver.findElement(By.css(`form input`)).sendKeys(code);\n  //target the button and search for it.\n  // here we should get the error message because we have an unregister case number\n  await driver.findElement(By.css(\"button\")).click();\n  // here the case number is valid so it should contain some information except the error message\n  const tableElement = await driver.wait(\n    until.elementLocated(By.css(\"tbody tr\"))\n  );\n  const codeNumber = await tableElement\n    .findElement(By.css(\"td:last-child\"))\n    .getText();\n  if (codeNumber != code)\n    throw new Error(\n      \"The expected ujuri result didn't match with the code that we input\"\n    );\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "c017e063-8407-4c2c-b777-591cb012e996",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "home-page about-us",
              "fullTitle": "Home Page component Test home-page about-us",
              "timedOut": null,
              "duration": 2783,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.get(\"https://demo.ejalas.com/hamro-barema\");\n  const textContainer = await driver.findElement(\n    By.className(\"hamro-barema-container\")\n  );\n  // check if the container is displayed or not.\n  if (!(await textContainer.isDisplayed()))\n    throw new Error(\"The container is not displayed in the page.\");\n  // check if the text is empty or not.\n  const text = await textContainer.getText();\n  if (text == \"\") throw new Error(\"The content in the page is not shown\");\n  console.log(await textContainer.getText());\n} catch (err) {\n  throw new Error(err);\n}",
              "err": {},
              "uuid": "25da8671-5200-44b8-a8a8-3d8d9837d510",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "conflict look-up test",
              "fullTitle": "Home Page component Test conflict look-up test",
              "timedOut": null,
              "duration": 9028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n  select: \"जग्गा मिचि भवन निर्माण\",\n  date: \"2080-04-24\",\n};\nawait driver.get(\"https://demo.ejalas.com/index\");\n// first select the type of the type of case\nconst selectElement = await driver.findElement(\n  By.id(\"inlineFormCustomSelect\")\n);\nconst select = new Select(selectElement);\nselect.selectByVisibleText(obj.select);\n// now select the date of register case.\nawait driver\n  .findElement(By.className(\"nepali-datepicker ndp-nepali-calendar\"))\n  .sendKeys(obj.date);\n//submit the detail\nconst submitBtn = await driver.findElement(\n  By.className(\"common-case-btn section-content-item\")\n);\nawait driver.wait(until.elementIsVisible(submitBtn), 10000);\nawait driver.executeScript(\"arguments[0].click();\", submitBtn);\n// result will show according to the detail provided\n// check for the result\nconst targetElement = await driver.findElements(By.css(`tbody tr`));\n// check if the data is present or not it should not be empty\nconsole.log(targetElement.length);\nif (targetElement == 0)\n  throw new Error(\"The search result didn't match for the given input\");\nawait driver.sleep(3000);",
              "err": {},
              "uuid": "9a9c9a73-79ba-486a-b8d0-6dbcfb6b812b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee27ddb7-1c95-479a-add5-328e1641c01b",
            "77621d87-005c-4650-b8bf-951e28e3a569",
            "c017e063-8407-4c2c-b777-591cb012e996",
            "25da8671-5200-44b8-a8a8-3d8d9837d510",
            "9a9c9a73-79ba-486a-b8d0-6dbcfb6b812b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31306,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}